// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/common/protocol/proto/agent.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnoozeAgent_RegisterInstance_FullMethodName     = "/protocol.SnoozeAgent/RegisterInstance"
	SnoozeAgent_UnregisterInstance_FullMethodName   = "/protocol.SnoozeAgent/UnregisterInstance"
	SnoozeAgent_SendIdleNotification_FullMethodName = "/protocol.SnoozeAgent/SendIdleNotification"
	SnoozeAgent_SendHeartbeat_FullMethodName        = "/protocol.SnoozeAgent/SendHeartbeat"
	SnoozeAgent_ReportStateChange_FullMethodName    = "/protocol.SnoozeAgent/ReportStateChange"
	SnoozeAgent_GetInstanceInfo_FullMethodName      = "/protocol.SnoozeAgent/GetInstanceInfo"
	SnoozeAgent_StopInstance_FullMethodName         = "/protocol.SnoozeAgent/StopInstance"
	SnoozeAgent_StartInstance_FullMethodName        = "/protocol.SnoozeAgent/StartInstance"
	SnoozeAgent_PerformCloudAction_FullMethodName   = "/protocol.SnoozeAgent/PerformCloudAction"
	SnoozeAgent_ListCloudProviders_FullMethodName   = "/protocol.SnoozeAgent/ListCloudProviders"
)

// SnoozeAgentClient is the client API for SnoozeAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnoozeAgentClient interface {
	// RegisterInstance registers a new instance with the agent
	RegisterInstance(ctx context.Context, in *InstanceRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error)
	// UnregisterInstance unregisters an instance from the agent
	UnregisterInstance(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error)
	// SendIdleNotification sends an idle notification to the agent
	SendIdleNotification(ctx context.Context, in *IdleNotificationRequest, opts ...grpc.CallOption) (*IdleNotificationResponse, error)
	// SendHeartbeat sends a heartbeat to the agent
	SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// ReportStateChange reports a state change to the agent
	ReportStateChange(ctx context.Context, in *StateChangeRequest, opts ...grpc.CallOption) (*StateChangeResponse, error)
	// Cloud Provider Operations
	GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error)
	StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error)
	StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error)
	PerformCloudAction(ctx context.Context, in *CloudActionRequest, opts ...grpc.CallOption) (*CloudActionResponse, error)
	ListCloudProviders(ctx context.Context, in *ListCloudProvidersRequest, opts ...grpc.CallOption) (*ListCloudProvidersResponse, error)
}

type snoozeAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewSnoozeAgentClient(cc grpc.ClientConnInterface) SnoozeAgentClient {
	return &snoozeAgentClient{cc}
}

func (c *snoozeAgentClient) RegisterInstance(ctx context.Context, in *InstanceRegistration, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_RegisterInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) UnregisterInstance(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnregisterResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_UnregisterInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) SendIdleNotification(ctx context.Context, in *IdleNotificationRequest, opts ...grpc.CallOption) (*IdleNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdleNotificationResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_SendIdleNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) SendHeartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_SendHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) ReportStateChange(ctx context.Context, in *StateChangeRequest, opts ...grpc.CallOption) (*StateChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateChangeResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_ReportStateChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) GetInstanceInfo(ctx context.Context, in *GetInstanceInfoRequest, opts ...grpc.CallOption) (*GetInstanceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInstanceInfoResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_GetInstanceInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...grpc.CallOption) (*StopInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopInstanceResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_StopInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...grpc.CallOption) (*StartInstanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartInstanceResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_StartInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) PerformCloudAction(ctx context.Context, in *CloudActionRequest, opts ...grpc.CallOption) (*CloudActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloudActionResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_PerformCloudAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snoozeAgentClient) ListCloudProviders(ctx context.Context, in *ListCloudProvidersRequest, opts ...grpc.CallOption) (*ListCloudProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCloudProvidersResponse)
	err := c.cc.Invoke(ctx, SnoozeAgent_ListCloudProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnoozeAgentServer is the server API for SnoozeAgent service.
// All implementations must embed UnimplementedSnoozeAgentServer
// for forward compatibility.
type SnoozeAgentServer interface {
	// RegisterInstance registers a new instance with the agent
	RegisterInstance(context.Context, *InstanceRegistration) (*RegistrationResponse, error)
	// UnregisterInstance unregisters an instance from the agent
	UnregisterInstance(context.Context, *UnregisterRequest) (*UnregisterResponse, error)
	// SendIdleNotification sends an idle notification to the agent
	SendIdleNotification(context.Context, *IdleNotificationRequest) (*IdleNotificationResponse, error)
	// SendHeartbeat sends a heartbeat to the agent
	SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// ReportStateChange reports a state change to the agent
	ReportStateChange(context.Context, *StateChangeRequest) (*StateChangeResponse, error)
	// Cloud Provider Operations
	GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error)
	StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
	StartInstance(context.Context, *StartInstanceRequest) (*StartInstanceResponse, error)
	PerformCloudAction(context.Context, *CloudActionRequest) (*CloudActionResponse, error)
	ListCloudProviders(context.Context, *ListCloudProvidersRequest) (*ListCloudProvidersResponse, error)
	mustEmbedUnimplementedSnoozeAgentServer()
}

// UnimplementedSnoozeAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnoozeAgentServer struct{}

func (UnimplementedSnoozeAgentServer) RegisterInstance(context.Context, *InstanceRegistration) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstance not implemented")
}
func (UnimplementedSnoozeAgentServer) UnregisterInstance(context.Context, *UnregisterRequest) (*UnregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterInstance not implemented")
}
func (UnimplementedSnoozeAgentServer) SendIdleNotification(context.Context, *IdleNotificationRequest) (*IdleNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIdleNotification not implemented")
}
func (UnimplementedSnoozeAgentServer) SendHeartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHeartbeat not implemented")
}
func (UnimplementedSnoozeAgentServer) ReportStateChange(context.Context, *StateChangeRequest) (*StateChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStateChange not implemented")
}
func (UnimplementedSnoozeAgentServer) GetInstanceInfo(context.Context, *GetInstanceInfoRequest) (*GetInstanceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceInfo not implemented")
}
func (UnimplementedSnoozeAgentServer) StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopInstance not implemented")
}
func (UnimplementedSnoozeAgentServer) StartInstance(context.Context, *StartInstanceRequest) (*StartInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartInstance not implemented")
}
func (UnimplementedSnoozeAgentServer) PerformCloudAction(context.Context, *CloudActionRequest) (*CloudActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformCloudAction not implemented")
}
func (UnimplementedSnoozeAgentServer) ListCloudProviders(context.Context, *ListCloudProvidersRequest) (*ListCloudProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloudProviders not implemented")
}
func (UnimplementedSnoozeAgentServer) mustEmbedUnimplementedSnoozeAgentServer() {}
func (UnimplementedSnoozeAgentServer) testEmbeddedByValue()                     {}

// UnsafeSnoozeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnoozeAgentServer will
// result in compilation errors.
type UnsafeSnoozeAgentServer interface {
	mustEmbedUnimplementedSnoozeAgentServer()
}

func RegisterSnoozeAgentServer(s grpc.ServiceRegistrar, srv SnoozeAgentServer) {
	// If the following call pancis, it indicates UnimplementedSnoozeAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnoozeAgent_ServiceDesc, srv)
}

func _SnoozeAgent_RegisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).RegisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_RegisterInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).RegisterInstance(ctx, req.(*InstanceRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_UnregisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).UnregisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_UnregisterInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).UnregisterInstance(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_SendIdleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdleNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).SendIdleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_SendIdleNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).SendIdleNotification(ctx, req.(*IdleNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_SendHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).SendHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_SendHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).SendHeartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_ReportStateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).ReportStateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_ReportStateChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).ReportStateChange(ctx, req.(*StateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_GetInstanceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).GetInstanceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_GetInstanceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).GetInstanceInfo(ctx, req.(*GetInstanceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_StopInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).StopInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_StopInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).StopInstance(ctx, req.(*StopInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_StartInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).StartInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_StartInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).StartInstance(ctx, req.(*StartInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_PerformCloudAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).PerformCloudAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_PerformCloudAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).PerformCloudAction(ctx, req.(*CloudActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnoozeAgent_ListCloudProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloudProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnoozeAgentServer).ListCloudProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnoozeAgent_ListCloudProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnoozeAgentServer).ListCloudProviders(ctx, req.(*ListCloudProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnoozeAgent_ServiceDesc is the grpc.ServiceDesc for SnoozeAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnoozeAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.SnoozeAgent",
	HandlerType: (*SnoozeAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterInstance",
			Handler:    _SnoozeAgent_RegisterInstance_Handler,
		},
		{
			MethodName: "UnregisterInstance",
			Handler:    _SnoozeAgent_UnregisterInstance_Handler,
		},
		{
			MethodName: "SendIdleNotification",
			Handler:    _SnoozeAgent_SendIdleNotification_Handler,
		},
		{
			MethodName: "SendHeartbeat",
			Handler:    _SnoozeAgent_SendHeartbeat_Handler,
		},
		{
			MethodName: "ReportStateChange",
			Handler:    _SnoozeAgent_ReportStateChange_Handler,
		},
		{
			MethodName: "GetInstanceInfo",
			Handler:    _SnoozeAgent_GetInstanceInfo_Handler,
		},
		{
			MethodName: "StopInstance",
			Handler:    _SnoozeAgent_StopInstance_Handler,
		},
		{
			MethodName: "StartInstance",
			Handler:    _SnoozeAgent_StartInstance_Handler,
		},
		{
			MethodName: "PerformCloudAction",
			Handler:    _SnoozeAgent_PerformCloudAction_Handler,
		},
		{
			MethodName: "ListCloudProviders",
			Handler:    _SnoozeAgent_ListCloudProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/common/protocol/proto/agent.proto",
}
